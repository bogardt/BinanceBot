name: .NET Coverage and GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'

    - name: Restore dependencies
      run: dotnet restore
  
    - name: Create gh-pages branch if not exists
      run: |
        if (-not (git ls-remote --exit-code --heads origin gh-pages)) {
          git checkout --orphan gh-pages
          git rm -rf .
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git commit --allow-empty -m "Initial gh-pages branch"
          git push origin gh-pages
          git checkout main
        }
      shell: powershell

    - name: Run tests with coverage
      run: dotnet test --collect:"XPlat Code Coverage"

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: reportgenerator -reports:**/TestResults/**/*.cobertura.xml -targetdir:coverage -reporttypes:Cobertura

    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v2
      with:
        files: coverage/**/*.xml
        fail_ci_if_error: true

    - name: Commit and push coverage report to GitHub Pages
      uses: EndBug/add-and-commit@v7
      with:
        author_name: github-actions
        author_email: actions@github.com
        message: 'Deploy Coverage Report to GitHub Pages'
        add: 'coverage/*'
        branch: 'gh-pages'
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload coverage to GitHub Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage/